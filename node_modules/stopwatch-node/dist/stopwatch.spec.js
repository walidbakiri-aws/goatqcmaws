"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stopwatch_1 = require("./stopwatch");
const taskinfo_1 = require("./taskinfo");
describe('StopWatch Test', () => {
    let sw;
    // const sleep: Function = util.promisify(setTimeout);
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    beforeEach(() => {
        sw = new stopwatch_1.StopWatch('sw');
    });
    test('should add task and log correctly', async () => {
        expect(sw.prettyPrint()).toContain(stopwatch_1.StopWatch.NoTaskMessage);
        expect(sw.isRunning()).toBeFalsy();
        const taskTimers = [30, 20];
        const taskTimersTotal = taskTimers.reduce((a, b) => a + b, 0);
        const firstTaskName = 'Test Task 1';
        sw.start(firstTaskName);
        await sleep(taskTimers[0]);
        expect(sw.isRunning()).toBeTruthy();
        sw.stop();
        expect(sw.isRunning()).toBeFalsy();
        const secondTaskName = 'Test Task 2';
        sw.start(secondTaskName);
        await sleep(taskTimers[1]);
        sw.stop();
        expect(sw.getTaskCount()).toBe(2);
        const prettyPrint = sw.prettyPrint();
        expect(prettyPrint).not.toBeNull();
        expect(prettyPrint).toContain(firstTaskName);
        expect(prettyPrint).toContain(secondTaskName);
        const rawTotal = sw.getTotalTime();
        expect(rawTotal).toBeGreaterThanOrEqual(taskTimersTotal);
        const noTask = sw.getTask('No task');
        expect(noTask).toBeUndefined();
        const taskOne = sw.getTask(firstTaskName);
        expect(taskOne).toBeInstanceOf(taskinfo_1.TaskInfo);
        expect(taskOne === null || taskOne === void 0 ? void 0 : taskOne.percentage).toBeTruthy;
    });
    test('should throw error calling start when some task already started', () => {
        sw = new stopwatch_1.StopWatch();
        sw.start();
        expect(() => sw.start('New Task')).toThrow();
    });
    test('should throw error calling sttop when no task', () => {
        expect(() => sw.stop()).toThrow();
    });
});
//# sourceMappingURL=stopwatch.spec.js.map